rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // --- Users Collection ---
    // User documents store public profiles and friend lists.
    // The `username` is a permanent, lowercase identifier derived from the user's email.
    // The `displayName` is a separate, user-customizable name.
    match /users/{userId} {
      // isUserSchema validates the document structure on create and update.
      function isUserSchema(data) {
        return data.uid == userId &&
               data.username is string &&
               data.displayName is string &&
               data.displayName_lowercase is string &&
               data.email is string &&
               data.photoURL is string &&
               data.friends is list &&
               data.createdAt is timestamp &&
               data.keys().hasOnly(['uid', 'username', 'displayName', 'displayName_lowercase', 'email', 'photoURL', 'friends', 'createdAt']);
      }

      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       isUserSchema(request.resource.data);

      allow read: if request.auth != null;

      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       isUserSchema(request.resource.data);

      allow delete: if false;
    }

    // --- Usernames Collection ---
    // This collection is used to enforce unique usernames across the application.
    // A document is created here in a transaction when a user signs up.
    match /usernames/{username} {
      allow create: if request.auth != null;
      allow read: if true; // Publicly readable to check for availability
      allow update, delete: if false; // Cannot be changed by clients
    }

    // --- Friendships Collection ---
    match /friendships/{friendshipId} {
      // A user can create a friendship document if they are one of the members.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;

      // A user can read, update, or delete a friendship document if they are a member.
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.members;
    }

    // --- Tips Collection ---
    match /tips/{tipId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && resource.data.recipientId == request.auth.uid;
      allow update: if request.auth != null && resource.data.recipientId == request.auth.uid;
    }

    // --- Signals Collection ---
    match /signals/{signalId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null;
    }

    // --- Groups Collection ---
    match /groups/{groupId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      
      // Messages Subcollection
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
      }
    }
  }
}
